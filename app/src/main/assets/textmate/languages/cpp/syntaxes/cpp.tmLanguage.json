{
    "name": "C++",
    "scopeName": "source.cpp",
    "fileTypes": ["cpp", "cc", "h", "hpp"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#preprocessor"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#control-flow"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#classes"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.cpp",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.cpp",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "preprocessor": {
            "patterns": [
                {
                    "name": "keyword.other.preprocessor.cpp",
                    "match": "^\\s*#\\s*(include|define|undef|if|ifdef|ifndef|else|elif|endif|error|pragma|line)\\b"
                },
                {
                    "name": "keyword.other.include.cpp",
                    "match": "(#)\\s*(include)\\s*[\"<]([^\">]*)[\">]",
                    "captures": {
                        "1": { "name": "keyword.other.preprocessor.cpp" },
                        "2": { "name": "keyword.other.preprocessor.include.cpp" },
                        "3": { "name": "string.quoted.other.lt-gt.include.cpp" }
                    }
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.cpp",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.cpp",
                            "match": "\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\"'?\\\\abfnrtv])"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.cpp",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.cpp",
                            "match": "\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\"'?\\\\abfnrtv])"
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.cpp",
                    "match": "\\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\\b"
                },
                {
                    "name": "keyword.operator.new.cpp",
                    "match": "\\b(new|delete)\\b"
                },
                {
                    "name": "keyword.other.cpp",
                    "match": "\\b(auto|const|constexpr|extern|inline|mutable|register|restrict|static|volatile|virtual|final|override|explicit|template|typename|using|namespace)\\b"
                },
                {
                    "name": "storage.type.cpp",
                    "match": "\\b(bool|char|double|float|int|long|short|signed|unsigned|void|wchar_t)\\b"
                },
                {
                    "name": "storage.type.modifier.cpp",
                    "match": "\\b(class|enum|struct|typedef|union)\\b"
                }
            ]
        },
        "control-flow": {
            "name": "keyword.control.flow.cpp",
            "match": "\\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\\b"
        },
        "operators": {
            "name": "keyword.operator.cpp",
            "match": "(\\+|\\-|\\*|\\/|%|=|!|<|>|&|\\||\\^|~|\\?|:)|\\b(and|or|not|xor|and_eq|or_eq|xor_eq|not_eq|bitand|bitor|compl)\\b"
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.cpp",
                    "match": "\\b(true|false|nullptr|NULL)\\b"
                },
                {
                    "name": "constant.numeric.decimal.cpp",
                    "match": "\\b([0-9]+\\.?[0-9]*)\\b"
                },
                {
                    "name": "constant.numeric.hexadecimal.cpp",
                    "match": "\\b(0[xX][0-9A-Fa-f]+)\\b"
                }
            ]
        },
        "functions": {
            "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
            "captures": {
                "1": { "name": "entity.name.function.cpp" }
            }
        },
        "classes": {
            "match": "\\b(class|struct)\\s+([A-Za-z_][A-Za-z0-9_]*)",
            "captures": {
                "1": { "name": "keyword.other.cpp" },
                "2": { "name": "entity.name.class.cpp" }
            }
        }
    }
} 